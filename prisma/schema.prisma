// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "linux-arm64-openssl-1.1.x", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String   @db.ObjectId
}

model Destination {
  id          String             @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  star        Float              @default(0.00)
  img         DestinationImage[]
  views       String[]
  lat         Float
  location    String
  long        Float
  price       Float              @default(0.00)
  offer       Boolean            @default(false)
  offerPrice  Float              @default(0.00)
  userEmail   String
  cityId      String             @db.ObjectId
  createdAt   DateTime           @default(now())
}

model Hotel {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String
  star          Float        @default(0.00)
  img           HotelImage[]
  lat           Float
  location      String
  long          Float
  views         String[]
  price         Float        @default(0.00)
  offer         Boolean      @default(false)
  offerPrice    Float        @default(0.00)
  userEmail     String
  cityId        String       @db.ObjectId
  user          User         @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  createdAt     DateTime     @default(now())
  travelStyleId String       @db.ObjectId
  TravelStyle   TravelStyle  @relation(fields: [travelStyleId], references: [id], onDelete: Cascade)
}

model Booking {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime   @default(now())
  sessionId     String?    @default("64d9d7ed75d747ce9abc0d0b")
  hotellId      String     @db.ObjectId
  description   String
  startDate     String
  endDate       String
  lat           Float
  location      String
  long          Float
  price         String
  status        String     @default("active pending")
  type          String     @default("hotel")
  star          Float
  title         String
  total         Float?
  userEmail     String
  travelStyleId String?
  cityId        String
  user          User       @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  img           HotelImage @relation(fields: [hotellId], references: [hotelId], onDelete: Cascade)
  // HotelImage   HotelImage? @relation(fields: [hotelImageId], references: [id])
  // hotelImageId String?    @db.ObjectId
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  role           String    @default("user")
  accounts       Account[]
  sessions       Session[]
  favorites      Hotel[]
  bookings       Booking[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model HotelImage {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  hotelId  String    @unique @db.ObjectId
  publicId String    @unique
  url      String
  status   String
  hotel    Hotel     @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  Booking  Booking[]
}

model DestinationImage {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  destinationId String      @db.ObjectId
  publicId      String      @unique
  url           String
  status        String
  destination   Destination @relation(fields: [destinationId], references: [id], onDelete: Cascade)
}

model City {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  cityName String
  publicId String @unique
  url      String
  status   String
}

model TravelStyle {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  styleName String
  publicId  String  @unique
  url       String
  status    String
  Hotel     Hotel[]
}

// model HotelViews {
//   id      String  @id @default(auto()) @map("_id") @db.ObjectId
//   email   String
//   Hotel   Hotel?  @relation(fields: [hotelId], references: [id])
//   hotelId String? @db.ObjectId
// }

// model DestinationViews {
//   id            String       @id @default(auto()) @map("_id") @db.ObjectId
//   email         String
//   Destination   Destination? @relation(fields: [destinationId], references: [id])
//   destinationId String?      @db.ObjectId
// }
