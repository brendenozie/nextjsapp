// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
  // transactions = false
}

// Necessary for Next auth
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String   @db.ObjectId
}

model Hotel {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String
  star          Float        @default(0.00)
  img           HotelImage[]
  lat           Float
  location      String
  long          Float
  price         Float        @default(0.00)
  offer         Boolean      @default(false)
  offerPrice    Float        @default(0.00)
  userEmail     String
  cityId        String       @db.ObjectId
  user          User         @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  createdAt     DateTime     @default(now())
  City          City         @relation(fields: [cityId], references: [id], onDelete: Cascade)
  travelStyleId String       @db.ObjectId
  TravelStyle   TravelStyle  @relation(fields: [travelStyleId], references: [id], onDelete: Cascade)

  @@unique([id, userEmail])
}

model Booking {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime @default(now())
  sessionId   String   @unique
  hotelId     String
  description String
  startDate   String
  endDate     String
  img         String
  lat         Float
  location    String
  long        Float
  price       String
  star        Float
  title       String
  total       Float
  userEmail   String
  cityId      String
  user        User     @relation(fields: [userEmail], references: [email], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  favorites     Hotel[]
  bookings      Booking[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model HotelImage {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  hotelId  String @db.ObjectId
  publicId String
  url      String
  status   String
  hotel    Hotel  @relation(fields: [hotelId], references: [id], onDelete: Cascade)
}

model City {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  cityName String
  publicId String
  url      String
  status   String
  Hotel    Hotel[]
}

model TravelStyle {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  styleName String
  publicId  String
  url       String
  status    String
  Hotel     Hotel[]
}
